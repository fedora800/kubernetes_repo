
# git clone git@github.com:hub-kubernetes/cka-exam.git    -- clone this for edureka recorded classes

--------------------------------------------------------------------------------
POD

./pod/pod01_simple.yml                   # simple nginx pod
./pod/pod02_multi_container.yml
./pod/pod03_various_options.yml

------------------------------------------------------------------------------
KUBECTL
https://kubernetes.io/docs/reference/kubectl/cheatsheet/

apply
-----
kubectl apply -f filename.yml

edit
----
kubectl edit service <servicename>          # will edit the yaml of that resource and immediately apply when saved and exit


exec
----
kubectl exec <podname> -it -- bash
kubectl exec nginx-mydemo -- printenv  | grep SERVICE  | grep NGINX   # gives good info


describe
--------
kubectl describe endpoints test-service   # will show all the pods endpoint for this service


delete
------
kubectl delete pod <podname>
kubectl delete pod -all                   # all pods from the current namespace

$ k apply -f test_networkpolicy.yml
networkpolicy.networking.k8s.io/allow-out-to-in created   
# but i could not delete at all
$ kubectl delete networkpolicy allow-out-to-in
Error from server (NotFound): networkpolicies.networking.k8s.io "allow-out-to-in" not found
# i had to CHANGE to default namespace and only then i was able to delete

get
---
kubectl get pods pdnm-my-pod -o json -o yaml     # gives the output of the pod of the in-memory object of the api-server
kubectl get pods --show-labels
kubectl get pods --sort-by='.status.podIP' -o wide
kubectl get pods -A --sort-by=.metadata.namespace
kubectl get pods --sort-by=.status.containerStatuses[0].restartCount
kubectl get pods -l env=prod -o custom-columns=POD_IP:.status.podIPs    # get POD IPs
kubectl get pods  -l region=emea,app=webserver  # list pods matching BOTH labels (AND criteria)
kubectl get pods -l 'run in (mypod1,mypod2)'
kubectl get pods -l app=webserver     -o go-template='{{range .items}}{{.status.podIP}}{{"\n"}}{{end}}'
kubectl get pods -o wide --namespace=ns-test
kubectl get pods --selector='app=webserver'
kubectl get networkpolicy  -A


kubectl get endpoints -A
NAMESPACE          NAME                              ENDPOINTS                                                           AGE
calico-apiserver   calico-api                        192.168.189.2:5443,192.168.189.3:5443                               5d16h
calico-system      calico-kube-controllers-metrics   192.168.189.62:9094                                                 5d16h
calico-system      calico-typha                      172.31.104.228:5473,172.31.107.40:5473                              5d17h
default            kubernetes                        172.31.104.228:6443                                                 5d17h
kube-system        kube-dns                          192.168.189.61:53,192.168.189.63:53,192.168.189.61:53 + 3 more...   5d17h
ns-test            test-service                      192.168.129.232:80                                                  26h

label  (assigns labels at command-line if required, get --show-labels to see)
---------
kubectl label pods myapp type=trading region=emea


logs
----
kubectl logs -f mypod1

namespace
---------
kubectl get namespaces
kubectl create namespace ns-test
kubectl describe namespace ns-test
kubectl config set-context --current --namespace=ns-test                                 # changes the namespace in the config file, so permanent locally unless changed again


port-forward
------------
# since ngnix runs on 80, this will forward the local host port 4000 to pod port 80 -
# especially useful to directly communicate from local machine to a given port on a Pod without having to manually expose Services too
$ kubectl port-forward my-ngnix-pod1 4000:80 --address='0.0.0.0'
Forwarding from 0.0.0.0:4000 -> 80
# or we can let kubectl choose the local port - 
$ kubectl port-forward deployment/mongo :27017
Forwarding from 127.0.0.1:63753 -> 27017
Forwarding from [::1]:63753 -> 27017
# note that local host means not nodes, but local host on which we ran the portforward command.
# address 0.0.0.0 is important



run
---
kubectl run mypod1 --image=nginx

namespace
---------



--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

$ kubectl get pod test-pod-nginx --template='{{(index (index .spec.containers 0).ports 0).containerPort}}{{"\n"}}'
80


--------------------------------------------------------------------------------
TROUBLESHOOTING
https://kubernetes.io/docs/tasks/debug/debug-application/debug-pods/
k describe
k get events
k logs 
k exec and printenv







